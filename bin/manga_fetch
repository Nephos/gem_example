#!/usr/bin/env ruby

require 'optparse'

argv = OptionParser.new do |opts|
  opts.banner = "Usage: manga_scrap <name> <min..max>"
  $threads = 8
  $verbose = true
  $debug = false
  $verbose = false if ENV["VERBOSE"] == "false"
  $debug = true if ENV["DEBUG"] == "true"
  $dir = "/tmp"

  opts.on("--threads=N", "Number of threads to use (default: 1)") do |v|
    $threads = Integer(v)
  end

  opts.on("--dir=path", "--output=path", "Output directory (default: /tmp)") do |v|
    $dir = v
  end

  opts.on("--verbose", "Display infos on stderr (default)") do
    $verbose = true
  end

  opts.on("--no-verbose", "Display infos on stderr") do
    $verbose = true
  end

  opts.on("--debug", "-d", "Developper mode") do
    $debug = true
  end
end.parse!

if $debug
  require_relative "../lib/manga_fetch"
else
  require "manga_fetch"
end

m = argv[1].match(/\A(\d+)\.\.(\d+)\Z/)
nums = (m[1].to_i .. m[2].to_i).to_a

nb_elem_by_list = (nums.size.to_f / $threads).ceil
lists = nums.each_slice(nb_elem_by_list).to_a

STDERR.puts "Starting #{$threads} threads..." if $verbose
lists.map.with_index do |current_nums, idx|
  t = Thread.new do
    STDERR.puts "Started #{idx+1} / #{$threads} threads" if $verbose
    bot = MangaFetch::Fetcher.new
    list = bot.fetch(name: argv[0], num: current_nums, download: true, dir: $dir).flatten.sort
  end
  sleep 0.5
  t
end.map(&:join)
